package MiniOCL.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.IntentionDescriptorBase;
import jetbrains.mps.intentions.IntentionFactory;
import java.util.Collection;
import jetbrains.mps.intentions.IntentionExecutable;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.intentions.IntentionType;
import jetbrains.mps.smodel.SNodePointer;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import java.util.Collections;
import jetbrains.mps.intentions.IntentionExecutableBase;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.intentions.IntentionDescriptor;

public final class surroundWithIfExp2_Intention extends IntentionDescriptorBase implements IntentionFactory {
  private Collection<IntentionExecutable> myCachedExecutable;
  public surroundWithIfExp2_Intention() {
    super(MetaAdapterFactory.getConcept(0x30449d1747bd4700L, 0x8951af3bd758ccf6L, 0x5446b4ce85e9669bL, "MiniOCL.structure.OCL_Expression"), IntentionType.NORMAL, false, new SNodePointer("r:9003c2e5-bf1d-40d8-817b-19c4681d3e33(MiniOCL.intentions)", "2931292290279327015"));
  }
  @Override
  public String getPresentation() {
    return "surroundWithIfExp2";
  }
  @Override
  public boolean isApplicable(final SNode node, final EditorContext editorContext) {
    return true;
  }
  @Override
  public boolean isSurroundWith() {
    return false;
  }
  public Collection<IntentionExecutable> instances(final SNode node, final EditorContext context) {
    if (myCachedExecutable == null) {
      myCachedExecutable = Collections.<IntentionExecutable>singletonList(new surroundWithIfExp2_Intention.IntentionImplementation());
    }
    return myCachedExecutable;
  }
  /*package*/ final class IntentionImplementation extends IntentionExecutableBase {
    public IntentionImplementation() {
    }
    @Override
    public String getDescription(final SNode node, final EditorContext editorContext) {
      return "Surround With If Expression - Use As Then Part";
    }
    @Override
    public void execute(final SNode node, final EditorContext editorContext) {
      SNode ifExp = SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0x30449d1747bd4700L, 0x8951af3bd758ccf6L, 0x6a7d6d99e62bef94L, "MiniOCL.structure.OCL_IfExp")));
      SNode tmp = node;
      SNodeOperations.replaceWithAnother(node, ifExp);
      SLinkOperations.setTarget(ifExp, MetaAdapterFactory.getContainmentLink(0x30449d1747bd4700L, 0x8951af3bd758ccf6L, 0x6a7d6d99e62bef94L, 0x6a7d6d99e62bef98L, "thenExpression"), node);
    }
    @Override
    public IntentionDescriptor getDescriptor() {
      return surroundWithIfExp2_Intention.this;
    }
  }
}
